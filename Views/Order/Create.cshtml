@model productManagement.Models.Order

@{
    ViewData["Title"] = "Place Order";
}

<style>
    body {
        background: linear-gradient(135deg, #e0f2fe 0%, #bae6fd 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
    }

    .wrapper {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
    }

    .card {
        border-radius: 1rem;
        box-shadow: 0 10px 30px rgba(0, 123, 255, 0.15);
        max-width: 440px;
        height:auto;
        width: 100%;
        background-color: #ffffffdd;
    }

    .card-header {
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
        background: linear-gradient(90deg, #3b82f6, #2563eb);
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);
    }

    h3.mb-0 {
        font-weight: 700;
        letter-spacing: 0.02em;
        margin: 0.8rem 0;
        font-size: 1.3rem;
    }

    label {
        font-weight: 600;
        color: #1e3a8a;
    }

    input.form-control[disabled] {
        background-color: #e0e7ff;
        color: #1e40af;
        font-weight: 600;
    }

    .btn-primary {
        background: #2563eb;
        border: none;
        font-weight: 700;
        padding: 0.55rem;
        border-radius: 0.65rem;
        box-shadow: 0 4px 15px rgba(37, 99, 235, 0.3);
    }

    .btn-primary:hover {
        background-color: #1d4ed8;
        box-shadow: 0 6px 18px rgba(29, 78, 216, 0.5);
    }

    .btn-outline-secondary {
        border-radius: 0.65rem;
        font-weight: 600;
        padding: 0.55rem;
    }

    .btn-outline-secondary:hover {
        background-color: #3b82f6;
        color: white;
        border-color: #3b82f6;
    }

    .alert-danger, .alert-success {
        font-weight: 600;
        font-size: 0.95rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
</style>

<div class="wrapper">
    <div class="card">
        <div class="card-header text-white text-center">
            <h3 class="mb-0">Order Product</h3>
        </div>

        <div class="card-body p-3 px-4">
            @* TempData alerts (optional to keep) *@
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger" role="alert">@TempData["Error"]</div>
            }

            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success" role="alert">@TempData["Success"]</div>
            }

            <form asp-action="Create" method="post" novalidate id="orderForm">
                @Html.AntiForgeryToken()

                <input type="hidden" asp-for="ProductId" />

                <div class="mb-3">
                    <label class="form-label">Product</label>
                    <input type="text" class="form-control" value="@Model.Product?.Name" disabled />
                </div>

                <div class="mb-3">
                    <label asp-for="Quantity" class="form-label"></label>
                    <input asp-for="Quantity" class="form-control" id="quantityInput" />
                    <span asp-validation-for="Quantity" class="text-danger"></span>
                </div>

                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-primary" onclick="validateAndSubmitOrder()">Place Order</button>
                    <a asp-action="Index" asp-controller="Product" class="btn btn-outline-secondary">Cancel</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Success Toast -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999;">
        <div id="orderSuccessToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ✅ Order placed successfully! 🎉
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <!-- Error Toast -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999;">
        <div id="orderErrorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ⚠️ Hey man, enter a valid quantity!
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function validateAndSubmitOrder() {
            const quantityInput = document.getElementById('quantityInput');
            const quantity = parseInt(quantityInput.value);

            if (isNaN(quantity) || quantity <= 0) {
                // Show error toast
                const errorToastEl = document.getElementById('orderErrorToast');
                const errorToast = new bootstrap.Toast(errorToastEl);
                errorToast.show();
                return; // Stop further execution
            }

            // If valid, submit form and show success toast
            // First show success toast
            const successToastEl = document.getElementById('orderSuccessToast');
            const successToast = new bootstrap.Toast(successToastEl);
            successToast.show();

            // Submit the form AFTER showing toast, wait a moment
            setTimeout(() => {
                document.getElementById('orderForm').submit();
            }, 1500);
        }
    </script>

    @Html.Partial("_ValidationScriptsPartial")
}

